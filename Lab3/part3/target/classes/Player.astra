agent Player {
    module Console C;
    module System S;
    
    // Inferences
    types tictactoe {
        formula played(string, int);
        formula free(int);
        formula winner(string);
        formula loser(string);
        formula drawn();
        formula line(int, int, int);
        formula move(int);
        formula player(string);
        formula location(int);
        formula opponent(string);
        formula turn(string);
        formula token(string);
        formula first(boolean);
    }

    inference free(int L) :- location(L) & ~played(string T, L);
    inference winner(string T) :- line(int L1, int L2, int L3) &
              played(T, L1) & played(T, L2) & played(T, L3);
    inference loser(string T) :- player(T) & winner(string T2) & T ~= T2;
    inference drawn() :- ~free(int L) & ~winner(string T2);

    // Location
    initial location(1), location(2), location(3);
    initial location(4), location(5), location(6);
    initial location(7), location(8), location(9);

    // Winning lines
    initial line(1, 2, 3), line(4, 5, 6), line(7, 8, 9);
    initial line(1, 4, 7), line(2, 5, 8), line(3, 6, 9);
    initial line(1, 3, 9), line(3, 5, 7);
    initial player("O"), player("X");

    rule +turn(string T) : player(T) & opponent(string O) {
        if(winner(string W)){
            -turn(T);
            C.println("Winner: " + W);
        }else if(drawn()){
            -turn(T);
            C.println("Drown!");
        }else{
            !move(int L);
            !played(T, L);
            C.println(T + " marked on " + L);
            -turn(T);
            send(inform, O, played(T,L));
        }
    }

    rule +!played(string T, int L) : free(L) {
        +played(T, L);
    }

    // Player movement strategyâ€¦
    rule +!move(int L) : free(1) { L=1; }
    rule +!move(int L) : free(2) { L=2; }
    rule +!move(int L) : free(3) { L=3; }
    rule +!move(int L) : free(4) { L=4; }
    rule +!move(int L) : free(5) { L=5; }
    rule +!move(int L) : free(6) { L=6; }
    rule +!move(int L) : free(7) { L=7; }
    rule +!move(int L) : free(8) { L=8; }
    rule +!move(int L) : free(9) { L=9; }

    rule +!main([string token, string opponent, boolean turn]){
        +token(token);
        +opponent(opponent);
        if (turn == true){
            +first(true);
            +turn(token);
        }else{
            +first(false);
            C.println("It's not "+ token + "'s turn");
        }
    }

    rule @message(inform, string sender, played(string T, int L)) : token(string token){
        +played(T, L);
        +turn(token);
    }
}